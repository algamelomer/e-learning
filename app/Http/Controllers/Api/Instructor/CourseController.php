<?php

namespace App\Http\Controllers\Api\Instructor;

use App\Http\Controllers\Controller;
use App\Models\Course;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\User; // Import User model
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;

class CourseController extends Controller
{
    /**
     * Display a listing of the courses created by the authenticated instructor.
     */
    public function index(Request $request)
    {
        /** @var User $instructor */
        $instructor = Auth::user();

        $courses = Course::where('instructor_id', $instructor->user_id)
                         ->with('category')
                         ->withCount('videos')
                         ->latest()
                         ->paginate(10);

        return response()->json($courses);
    }

    /**
     * Store a newly created course in storage, assigned to the authenticated instructor.
     */
    public function store(Request $request)
    {
        /** @var User $instructor */
        $instructor = Auth::user();

        $validator = Validator::make($request->all(), [
            'title' => 'required|string|max:255|unique:courses,title',
            'description' => 'required|string',
            'category_id' => 'required|uuid|exists:categories,category_id',
            'price' => 'nullable|numeric|min:0',
            'thumbnail_url' => 'nullable|url',
            'is_published' => 'sometimes|boolean',
        ]);

        if ($validator->fails()) {
            return response()->json($validator->errors(), 422);
        }

        $validatedData = $validator->validated();

        $course = Course::create([
            // 'course_id' will be auto-generated by HasUuids trait
            'title' => $validatedData['title'],
            'description' => $validatedData['description'],
            'category_id' => $validatedData['category_id'],
            'instructor_id' => $instructor->user_id, // Assign current instructor
            'price' => $validatedData['price'] ?? 0.00,
            'thumbnail_url' => $validatedData['thumbnail_url'] ?? null,
            'is_published' => $validatedData['is_published'] ?? false,
            'slug' => Str::slug($validatedData['title']) . '-' . Str::lower(Str::random(6)),
        ]);

        return response()->json($course->load('category'), 201);
    }

    /**
     * Display the specified course if owned by the instructor.
     */
    public function show(Request $request, Course $course)
    {
        /** @var User $instructor */
        $instructor = Auth::user();
        if ($course->instructor_id !== $instructor->user_id) {
            return response()->json(['message' => 'Unauthorized. You do not own this course.'], 403);
        }
        return response()->json($course->load('category', 'videos', 'instructor:user_id,name'));
    }

    /**
     * Update the specified course in storage if owned by the instructor.
     */
    public function update(Request $request, Course $course)
    {
        /** @var User $instructor */
        $instructor = Auth::user();
        if ($course->instructor_id !== $instructor->user_id) {
            return response()->json(['message' => 'Unauthorized. You do not own this course.'], 403);
        }

        $validator = Validator::make($request->all(), [
            'title' => 'required|string|max:255|unique:courses,title,' . $course->course_id . ',course_id',
            'description' => 'required|string',
            'category_id' => 'required|uuid|exists:categories,category_id',
            'price' => 'nullable|numeric|min:0',
            'thumbnail_url' => 'nullable|url',
            'is_published' => 'sometimes|boolean',
        ]);

        if ($validator->fails()) {
            return response()->json($validator->errors(), 422);
        }

        $validatedData = $validator->validated();
        $updateData = $validatedData;

        // Update slug if title changed
        if (isset($validatedData['title']) && $validatedData['title'] !== $course->title) {
            $updateData['slug'] = Str::slug($validatedData['title']) . '-' . Str::lower(Str::random(6));
        }

        $course->update($updateData);

        return response()->json($course->load('category'));
    }

    /**
     * Remove the specified course from storage if owned by the instructor.
     */
    public function destroy(Request $request, Course $course)
    {
        /** @var User $instructor */
        $instructor = Auth::user();
        if ($course->instructor_id !== $instructor->user_id) {
            return response()->json(['message' => 'Unauthorized. You do not own this course.'], 403);
        }

        // TODO: Consider what happens to related entities (videos, enrollments etc.)
        // For now, a simple delete. You might want to soft delete or handle relations.
        $course->delete();
        return response()->json(null, 204);
    }
}
